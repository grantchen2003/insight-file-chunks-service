// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: file_chunks_service.proto

package protobufs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileChunksService_SaveFileChunks_FullMethodName = "/FileChunksService/SaveFileChunks"
)

// FileChunksServiceClient is the client API for FileChunksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileChunksServiceClient interface {
	SaveFileChunks(ctx context.Context, in *FileChunks, opts ...grpc.CallOption) (*SaveFileChunksResponse, error)
}

type fileChunksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileChunksServiceClient(cc grpc.ClientConnInterface) FileChunksServiceClient {
	return &fileChunksServiceClient{cc}
}

func (c *fileChunksServiceClient) SaveFileChunks(ctx context.Context, in *FileChunks, opts ...grpc.CallOption) (*SaveFileChunksResponse, error) {
	out := new(SaveFileChunksResponse)
	err := c.cc.Invoke(ctx, FileChunksService_SaveFileChunks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileChunksServiceServer is the server API for FileChunksService service.
// All implementations must embed UnimplementedFileChunksServiceServer
// for forward compatibility
type FileChunksServiceServer interface {
	SaveFileChunks(context.Context, *FileChunks) (*SaveFileChunksResponse, error)
	mustEmbedUnimplementedFileChunksServiceServer()
}

// UnimplementedFileChunksServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileChunksServiceServer struct {
}

func (UnimplementedFileChunksServiceServer) SaveFileChunks(context.Context, *FileChunks) (*SaveFileChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFileChunks not implemented")
}
func (UnimplementedFileChunksServiceServer) mustEmbedUnimplementedFileChunksServiceServer() {}

// UnsafeFileChunksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileChunksServiceServer will
// result in compilation errors.
type UnsafeFileChunksServiceServer interface {
	mustEmbedUnimplementedFileChunksServiceServer()
}

func RegisterFileChunksServiceServer(s grpc.ServiceRegistrar, srv FileChunksServiceServer) {
	s.RegisterService(&FileChunksService_ServiceDesc, srv)
}

func _FileChunksService_SaveFileChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileChunks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileChunksServiceServer).SaveFileChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileChunksService_SaveFileChunks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileChunksServiceServer).SaveFileChunks(ctx, req.(*FileChunks))
	}
	return interceptor(ctx, in, info, handler)
}

// FileChunksService_ServiceDesc is the grpc.ServiceDesc for FileChunksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileChunksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileChunksService",
	HandlerType: (*FileChunksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveFileChunks",
			Handler:    _FileChunksService_SaveFileChunks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file_chunks_service.proto",
}
